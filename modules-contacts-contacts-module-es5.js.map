{"version":3,"sources":["./src/app/components/contacts/contacts.component.html","./src/app/components/rep-dialog/rep-dialog.component.html","./src/app/components/contacts/contacts.component.css","./src/app/components/contacts/contacts.component.ts","./src/app/components/rep-dialog/rep-dialog.component.css","./src/app/components/rep-dialog/rep-dialog.component.ts","./src/app/modules/contacts/contacts-routing.module.ts","./src/app/modules/contacts/contacts.module.ts"],"names":[],"mappings":"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","file":"modules-contacts-contacts-module-es5.js","sourcesContent":["module.exports = \"<mat-tab-group>\\n  <mat-tab label=\\\"New Message\\\">\\n    <mat-horizontal-stepper [linear]=\\\"true\\\" #stepper>\\n      <mat-step [stepControl]=\\\"firstFormGroup\\\">\\n        <form [formGroup]=\\\"firstFormGroup\\\">\\n          <ng-template matStepLabel>Enter Reciepient Info</ng-template>\\n          <mat-form-field>\\n            <input\\n              matInput\\n              placeholder=\\\"Email\\\"\\n              formControlName=\\\"emailControl\\\"\\n              required\\n            />\\n          </mat-form-field>\\n\\n          <mat-form-field>\\n            <input\\n              type=\\\"text\\\"\\n              formControlName=\\\"priorityControl\\\"\\n              placeholder=\\\"Priority\\\"\\n              matInput\\n              [matAutocomplete]=\\\"autoPriority\\\"\\n              required\\n            />\\n            <mat-autocomplete\\n              autoActiveFirstOption\\n              #autoPriority=\\\"matAutocomplete\\\"\\n            >\\n              <mat-option\\n                *ngFor=\\\"let priority of priorities\\\"\\n                [value]=\\\"priority\\\"\\n              >\\n                {{ priority }}\\n              </mat-option>\\n            </mat-autocomplete>\\n          </mat-form-field>\\n\\n          <mat-form-field>\\n            <input\\n              type=\\\"text\\\"\\n              formControlName=\\\"departmentControl\\\"\\n              placeholder=\\\"Department\\\"\\n              matInput\\n              [matAutocomplete]=\\\"autoDepartment\\\"\\n              required\\n            />\\n            <mat-autocomplete\\n              autoActiveFirstOption\\n              #autoDepartment=\\\"matAutocomplete\\\"\\n              [displayWith]=\\\"getDepartmentName\\\"\\n            >\\n              <mat-option\\n                *ngFor=\\\"let department of departments\\\"\\n                [value]=\\\"department\\\"\\n              >\\n                {{ department.name }}\\n              </mat-option>\\n            </mat-autocomplete>\\n          </mat-form-field>\\n\\n          <div>\\n            <button\\n              mat-icon-button\\n              matStepperNext\\n              matTooltip=\\\"Continue\\\"\\n              matTooltipClass=\\\"example-tooltip\\\"\\n            >\\n              <mat-icon>arrow_forward</mat-icon>\\n            </button>\\n          </div>\\n        </form>\\n      </mat-step>\\n      <mat-step [stepControl]=\\\"secondFormGroup\\\">\\n        <form [formGroup]=\\\"secondFormGroup\\\">\\n          <mat-form-field>\\n            <input\\n              matInput\\n              placeholder=\\\"Message\\\"\\n              formControlName=\\\"messageControl\\\"\\n              required\\n            />\\n          </mat-form-field>\\n          <div>\\n            <button\\n              mat-icon-button\\n              matStepperPrevious\\n              matTooltip=\\\"Previous\\\"\\n              matTooltipClass=\\\"example-tooltip\\\"\\n            >\\n              <mat-icon>arrow_back</mat-icon>\\n            </button>\\n            <button\\n              mat-icon-button\\n              matStepperNext\\n              matTooltip=\\\"Finish\\\"\\n              matTooltipClass=\\\"example-tooltip\\\"\\n            >\\n              <mat-icon>mail_outline</mat-icon>\\n            </button>\\n          </div>\\n        </form>\\n      </mat-step>\\n      <mat-step [optional]=\\\"true\\\">\\n        <ng-template matStepLabel>Preview</ng-template>\\n        <p>Message Has Been Sent...!!</p>\\n        <div>\\n          <button\\n            mat-icon-button\\n            matStepperPrevious\\n            matTooltip=\\\"Previous\\\"\\n            matTooltipClass=\\\"example-tooltip\\\"\\n          >\\n            <mat-icon>arrow_back</mat-icon>\\n          </button>\\n          <button mat-icon-button (click)=\\\"stepper.reset()\\\">\\n            <mat-icon>refresh</mat-icon>\\n          </button>\\n        </div>\\n      </mat-step>\\n    </mat-horizontal-stepper>\\n  </mat-tab>\\n\\n  <mat-tab label=\\\"New Customer\\\">\\n    <mat-card>\\n      <mat-card-title>Add A New Customer</mat-card-title>\\n      <mat-card-content>\\n        <form>\\n          <mat-form-field class=\\\"full-width\\\">\\n            <input\\n              matInput\\n              placeholder=\\\"Email\\\"\\n              [formControl]=\\\"emailFormControl\\\"\\n              [errorStateMatcher]=\\\"matcher\\\"\\n            />\\n            <mat-hint align=\\\"end\\\">Hint: email@domain.com</mat-hint>\\n            <mat-error\\n              align=\\\"end\\\"\\n              *ngIf=\\\"\\n                emailFormControl.hasError('email') &&\\n                !emailFormControl.hasError('required')\\n              \\\"\\n            >\\n              Please Enter A Valid Email Address\\n            </mat-error>\\n          </mat-form-field>\\n          <mat-form-field>\\n            <input matInput placeholder=\\\"First Name\\\" />\\n          </mat-form-field>\\n          <mat-form-field>\\n            <input matInput placeholder=\\\"Middle Name\\\" />\\n          </mat-form-field>\\n          <mat-form-field>\\n            <input matInput placeholder=\\\"Last Name\\\" />\\n          </mat-form-field>\\n          <mat-form-field class=\\\"full-width\\\">\\n            <span matPrefix>+234</span>\\n            <input matInput placeholder=\\\"Phone\\\" />\\n          </mat-form-field>\\n          <mat-form-field>\\n            <input matInput placeholder=\\\"Fax\\\" />\\n            <mat-icon matSuffix>phone</mat-icon>\\n          </mat-form-field>\\n          <mat-form-field>\\n            <input\\n              matInput\\n              placeholder=\\\"Birthday\\\"\\n              [matDatepicker]=\\\"birthday\\\"\\n              [formControl]=\\\"dateFormControl\\\"\\n            />\\n            <mat-datepicker-toggle\\n              matSuffix\\n              [for]=\\\"birthday\\\"\\n            ></mat-datepicker-toggle>\\n            <mat-datepicker #birthday></mat-datepicker>\\n            <mat-error align=\\\"end\\\" *ngIf=\\\"dateFormControl.hasError('required')\\\">\\n              Please Provide A Valid Date (mm/dd/yyyy)\\n            </mat-error>\\n          </mat-form-field>\\n          <mat-form-field>\\n            <input\\n              matInput\\n              placeholder=\\\"Proposed Date\\\"\\n              [min]=\\\"minDate\\\"\\n              [matDatepicker]=\\\"proposedDate\\\"\\n              [formControl]=\\\"dateFormControl\\\"\\n            />\\n            <mat-datepicker-toggle\\n              matSuffix\\n              [for]=\\\"proposedDate\\\"\\n            ></mat-datepicker-toggle>\\n            <mat-datepicker #proposedDate></mat-datepicker>\\n            <mat-error align=\\\"end\\\" *ngIf=\\\"dateFormControl.hasError('required')\\\">\\n              Please Provide A Valid Date (mm/dd/yyyy)\\n            </mat-error>\\n          </mat-form-field>\\n          <mat-form-field>\\n            <input matInput placeholder=\\\"Fax\\\" />\\n            <mat-icon matSuffix>phone</mat-icon>\\n          </mat-form-field>\\n          <mat-form-field class=\\\"full-width\\\">\\n            <textarea matInput placeholder=\\\"Address\\\"></textarea>\\n          </mat-form-field>\\n        </form>\\n      </mat-card-content>\\n      <mat-card-actions>\\n        <button mat-raised-button color=\\\"accent\\\" (click)=\\\"openRepDialog()\\\">\\n          SAVE\\n        </button>\\n        <button mat-raised-button color=\\\"accent\\\" (click)=\\\"openUndoSnackBar()\\\">\\n          UNDO\\n        </button>\\n      </mat-card-actions>\\n    </mat-card>\\n  </mat-tab>\\n\\n  <mat-tab label=\\\"Contacts List\\\">\\n    <div class=\\\"order-actions\\\">\\n      <button mat-button color=\\\"accent\\\">DELETE</button>\\n      <button mat-button color=\\\"accent\\\">ARCHIVE</button>\\n    </div>\\n    <div class=\\\"order-container\\\">\\n      <table\\n        mat-table\\n        [dataSource]=\\\"dataSource\\\"\\n        matSort\\n        multiTemplateDataRows\\n      >\\n        <ng-container matColumnDef=\\\"actions\\\">\\n          <th mat-header-cell *matHeaderCellDef>\\n            <mat-checkbox (change)=\\\"selectAll()\\\"></mat-checkbox>\\n          </th>\\n          <td mat-cell *matCellDef=\\\"let element\\\">\\n            <mat-checkbox [checked]=\\\"element.isChecked\\\"></mat-checkbox>\\n          </td>\\n          <td mat-footer-cell *matFooterCellDef></td>\\n        </ng-container>\\n        <ng-container matColumnDef=\\\"id\\\">\\n          <th mat-header-cell *matHeaderCellDef mat-sort-header>#ID</th>\\n          <td mat-cell *matCellDef=\\\"let element\\\">\\n            {{ element.id }}\\n          </td>\\n          <td mat-footer-cell *matFooterCellDef></td>\\n        </ng-container>\\n        <ng-container matColumnDef=\\\"firstName\\\">\\n          <th mat-header-cell *matHeaderCellDef mat-sort-header>First Name</th>\\n          <td mat-cell *matCellDef=\\\"let element\\\">\\n            {{ element.firstName }}\\n          </td>\\n          <td mat-footer-cell *matFooterCellDef></td>\\n        </ng-container>\\n        <ng-container matColumnDef=\\\"lastName\\\">\\n          <th mat-header-cell *matHeaderCellDef mat-sort-header>Last Name</th>\\n          <td mat-cell *matCellDef=\\\"let element\\\">\\n            {{ element.lastName }}\\n          </td>\\n          <td mat-footer-cell *matFooterCellDef></td>\\n        </ng-container>\\n        <ng-container matColumnDef=\\\"city\\\">\\n          <th mat-header-cell *matHeaderCellDef mat-sort-header>City</th>\\n          <td mat-cell *matCellDef=\\\"let element\\\">\\n            {{ element.city }}\\n          </td>\\n          <td mat-footer-cell *matFooterCellDef>\\n            Total Contacts Are {{ totalContacts }}\\n          </td>\\n        </ng-container>\\n        <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns; sticky: true\\\"></tr>\\n        <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns\\\"></tr>\\n        <tr mat-footer-row *matFooterRowDef=\\\"displayedColumns; sticky: true\\\"></tr>\\n      </table>\\n    </div>\\n\\n    <mat-paginator\\n      [length]=\\\"length\\\"\\n      [pageSize]=\\\"pageSize\\\"\\n      [pageSizeOptions]=\\\"pageSizeOptions\\\"\\n      (page)=\\\"onPageChange($event)\\\"\\n    ></mat-paginator>\\n  </mat-tab>\\n\\n  <mat-tab label=\\\"Todos\\\">\\n    <mat-card>\\n      <mat-card-title>{{\\n        contactsService.todoForm.controls[\\\"$key\\\"].value\\n          ? \\\"Modify An Existing Todo\\\"\\n          : \\\"Add A New Todo\\\"\\n      }}</mat-card-title>\\n      <mat-card-content>\\n        <ng-container>\\n          <form\\n            [formGroup]=\\\"contactsService.todoForm\\\"\\n            class=\\\"normal-form\\\"\\n            (submit)=\\\"onSubmit()\\\"\\n          >\\n            <input type=\\\"hidden\\\" formControlName=\\\"$key\\\" />\\n            <mat-form-field class=\\\"full-width\\\">\\n              <input\\n                formControlName=\\\"addTodo\\\"\\n                matInput\\n                placeholder=\\\"Add A Todo Item\\\"\\n                required\\n              />\\n              <mat-error\\n                *ngIf=\\\"\\n                  contactsService.todoForm.controls['addTodo'].errors?.required\\n                \\\"\\n                >This Field Is Mandatory</mat-error\\n              >\\n            </mat-form-field>\\n            <div class=\\\"add-bottom-padding\\\">\\n              <mat-checkbox formControlName=\\\"isCompleted\\\"\\n                >Is Completed</mat-checkbox\\n              >\\n              <div class=\\\"todo-button\\\">\\n                <button\\n                  mat-raised-button\\n                  color=\\\"accent\\\"\\n                  type=\\\"submit\\\"\\n                  [disabled]=\\\"contactsService.todoForm.invalid\\\"\\n                >\\n                  {{\\n                    contactsService.todoForm.controls[\\\"$key\\\"].value\\n                      ? \\\"Update\\\"\\n                      : \\\"Submit\\\"\\n                  }}\\n                </button>\\n              </div>\\n            </div>\\n          </form>\\n        </ng-container>\\n        <div>\\n          <mat-action-list>\\n            <mat-list-item @fade *ngFor=\\\"let todo of contactsService.todos\\\">\\n              <h3 [ngClass]=\\\"recieveTodo(todo)\\\" @fade matLine>\\n                {{ todo.addTodo }}\\n              </h3>\\n            </mat-list-item>\\n          </mat-action-list>\\n        </div>\\n      </mat-card-content>\\n      <mat-card-actions></mat-card-actions>\\n    </mat-card>\\n  </mat-tab>\\n</mat-tab-group>\\n\"","module.exports = \"<h1 mat-dialog-title>Select A Response</h1>\\n<div mat-dialog-content>\\n  <mat-radio-group [(ngModel)]=\\\"rep\\\">\\n    <mat-radio-button value=\\\"Benion\\\">Benion</mat-radio-button>\\n    <mat-radio-button value=\\\"Benion\\\">Abosh</mat-radio-button>\\n    <mat-radio-button value=\\\"Benion\\\">Sino</mat-radio-button>\\n    <mat-radio-button value=\\\"Benion\\\">JoeBlaze</mat-radio-button>\\n    <mat-radio-button value=\\\"Benion\\\">Vin</mat-radio-button>\\n  </mat-radio-group>\\n  <div mat-dialog-actions>\\n    <button mat-button color=\\\"primary\\\" [mat-dialog-close]=\\\"rep\\\">SELECT</button>\\n  </div>\\n</div>\\n\"","module.exports = \".mat-card {\\r\\n    width: 600px;\\r\\n    margin: auto;\\r\\n}\\r\\n\\r\\n.mat-card .full-width {\\r\\n    width: 100%;\\r\\n}\\r\\n\\r\\n.mat-card .mat-card-actions {\\r\\n    display: block;\\r\\n    text-align: right;\\r\\n}\\r\\n\\r\\n.order-actions {\\r\\n    margin-top: 20px;\\r\\n}\\r\\n\\r\\n.order-conainer {\\r\\n    overflow: auto;\\r\\n    height: 400px;\\r\\n}\\r\\n\\r\\n.example-full-width {\\r\\n    width: 40%;\\r\\n}\\r\\n\\r\\n.add-bottom-padding .todo-button{\\r\\n    margin-left: 40%;\\r\\n}\\r\\n\\r\\n.normal-form {\\r\\n    align-items: center;\\r\\n}\\r\\n\\r\\n.is-completed {\\r\\n    text-decoration: line-through;\\r\\n}\\r\\n\\r\\n.hide {\\r\\n    display: none;\\r\\n}\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvY29tcG9uZW50cy9jb250YWN0cy9jb250YWN0cy5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0lBQ0ksWUFBWTtJQUNaLFlBQVk7QUFDaEI7O0FBRUE7SUFDSSxXQUFXO0FBQ2Y7O0FBRUE7SUFDSSxjQUFjO0lBQ2QsaUJBQWlCO0FBQ3JCOztBQUVBO0lBQ0ksZ0JBQWdCO0FBQ3BCOztBQUVBO0lBQ0ksY0FBYztJQUNkLGFBQWE7QUFDakI7O0FBRUE7SUFDSSxVQUFVO0FBQ2Q7O0FBRUE7SUFDSSxnQkFBZ0I7QUFDcEI7O0FBRUE7SUFDSSxtQkFBbUI7QUFDdkI7O0FBRUE7SUFDSSw2QkFBNkI7QUFDakM7O0FBRUE7SUFDSSxhQUFhO0FBQ2pCIiwiZmlsZSI6InNyYy9hcHAvY29tcG9uZW50cy9jb250YWN0cy9jb250YWN0cy5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLm1hdC1jYXJkIHtcclxuICAgIHdpZHRoOiA2MDBweDtcclxuICAgIG1hcmdpbjogYXV0bztcclxufVxyXG5cclxuLm1hdC1jYXJkIC5mdWxsLXdpZHRoIHtcclxuICAgIHdpZHRoOiAxMDAlO1xyXG59XHJcblxyXG4ubWF0LWNhcmQgLm1hdC1jYXJkLWFjdGlvbnMge1xyXG4gICAgZGlzcGxheTogYmxvY2s7XHJcbiAgICB0ZXh0LWFsaWduOiByaWdodDtcclxufVxyXG5cclxuLm9yZGVyLWFjdGlvbnMge1xyXG4gICAgbWFyZ2luLXRvcDogMjBweDtcclxufVxyXG5cclxuLm9yZGVyLWNvbmFpbmVyIHtcclxuICAgIG92ZXJmbG93OiBhdXRvO1xyXG4gICAgaGVpZ2h0OiA0MDBweDtcclxufVxyXG5cclxuLmV4YW1wbGUtZnVsbC13aWR0aCB7XHJcbiAgICB3aWR0aDogNDAlO1xyXG59XHJcblxyXG4uYWRkLWJvdHRvbS1wYWRkaW5nIC50b2RvLWJ1dHRvbntcclxuICAgIG1hcmdpbi1sZWZ0OiA0MCU7XHJcbn1cclxuXHJcbi5ub3JtYWwtZm9ybSB7XHJcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG59XHJcblxyXG4uaXMtY29tcGxldGVkIHtcclxuICAgIHRleHQtZGVjb3JhdGlvbjogbGluZS10aHJvdWdoO1xyXG59XHJcblxyXG4uaGlkZSB7XHJcbiAgICBkaXNwbGF5OiBub25lO1xyXG59Il19 */\"","import { DepartmentsService } from './../../services/departments.service';\nimport { UserService } from './../../services/user.service';\nimport { DialogService } from './../../services/dialog.service';\nimport { ContactsService } from './../../services/contacts.service';\nimport { Component, OnInit, ViewChild } from '@angular/core';\nimport { MatDialog, MatDialogRef, MatSnackBar, MatTableDataSource, MatSort, PageEvent } from '@angular/material';\nimport { FormGroup, FormBuilder, Validators, FormControl } from '@angular/forms';\nimport { RepDialogComponent } from '../rep-dialog/rep-dialog.component';\nimport { NotificationsService } from './../../services/notifications.service';\nimport {\n  trigger,\n  state,\n  transition,\n  style,\n  animate\n} from '@angular/animations';\nimport { fadeAnimation } from 'src/app/fade-animations';\n\n\nclass Contacts {\n  id: number;\n  firstName: string;\n  lastName: string;\n  city: string;\n  isChecked: boolean;\n}\n\n@Component({\n  selector: 'app-contacts',\n  templateUrl: './contacts.component.html',\n  styleUrls: ['./contacts.component.css'],\n  animations: [\n    fadeAnimation\n  ]\n})\nexport class ContactsComponent implements OnInit {\n\n  // Contacts List\n  contactsData: Contacts[];\n  totalContacts: number = this.contactsService.contactSize;\n\n// Contacts List\n  displayedColumns: string[] = [\n    'actions',\n    'id',\n    'firstName',\n    'lastName',\n    'city',\n  ];\n\n  dataSource: MatTableDataSource<object>;\n\n  length = 100;\n  pageIndex = 0;\n  pageSize = 20;\n  pageSizeOptions = [1, 2, 5, 10, 20];\n\n\n// New Customer\n  emailFormControl: FormControl;\n  dateFormControl: FormControl;\n  minDate = new Date();\n\n// New Message\n  firstFormGroup: FormGroup;\n  secondFormGroup: FormGroup;\n  priorities: string[] = ['High', 'Medium', 'Low'];\n  departments: object[] = [\n    {\n      id: 1,\n      name: 'Complaints'\n    },\n    {\n      id: 2,\n      name: 'Loyalties'\n    },\n    {\n      id: 3,\n      name: 'Promotions'\n    }\n  ];\n\n// Todo\n  item;\n\n\n// Contacts List\n  @ViewChild(MatSort, { static: true }) sort: MatSort;\n  pageEvent: PageEvent;\n\n  constructor(\n    private formBuilder: FormBuilder,\n    public dialog: MatDialog,\n    public snackbar: MatSnackBar,\n    private contactsService: ContactsService,\n    private notificationsService: NotificationsService,\n    private dialogService: DialogService,\n  ) { }\n\n  // Contacts List\n  onPageChange(event) {\n    const previousPageIndex = event.previousPageIndex;\n    this.pageIndex = event.pageIndex;\n    this.pageSize = event.pageSize;\n    this.length = event.length;\n    this.loadData(this.pageIndex, this.pageSize);\n  }\n\n  loadData(pageIndex, pageSize) {\n    this.dataSource = new MatTableDataSource<object>(this.contactsData.slice(pageIndex, pageIndex + pageSize));\n  }\n\n  ngOnInit() {\n// Contacts\n    this.contactsData = this.contactsService.contacts;\n    this.loadData(0, this.pageSize);\n    this.dataSource.sort = this.sort;\n\n\n// New Customer\n    this.emailFormControl = new FormControl('', [\n      Validators.required,\n      Validators.email\n    ]);\n    this.dateFormControl = new FormControl('', [\n      Validators.required\n    ]);\n\n  // New Message\n    this.firstFormGroup = this.formBuilder.group({\n      emailControl: ['', Validators.required],\n      priorityControl: ['', Validators.required],\n      departmentControl: ['', Validators.required]\n    });\n    this.secondFormGroup = this.formBuilder.group({\n      messageControl: ['', Validators.required]\n    });\n\n  // Todos\n    this.contactsService.getTodos();\n  }\n\n  // Contacts List\n  selectAll() {\n    for (const element of this.contactsData) {\n      element.isChecked = !element.isChecked;\n    }\n  }\n\n  // New Message\n  getDepartmentName(department: object) {\n    const name = 'name';\n    return department ? department[name] : undefined;\n  }\n\n// New Customer\n  openRepDialog() {\n    const dialogRef = this.dialog.open(RepDialogComponent, {\n      width: '250px',\n      data: {}\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      alert(`The User Choose ${ result }`);\n    });\n  }\n\n// Todos\n  onSubmit() {\n  if (this.contactsService.todoForm.valid) {\n      if (!this.contactsService.todoForm.get('$key').value) {\n        this.contactsService.insertTodo(this.contactsService.todoForm.value);\n        this.contactsService.todoForm.reset();\n        this.contactsService.initializeFormGroup();\n        this.notificationsService.success(':: Has Been Submitted Successfully ::');\n      } else {\n        this.contactsService.updateTodo(this.contactsService.todoForm.value);\n        this.contactsService.todoForm.reset();\n        this.contactsService.initializeFormGroup();\n        this.notificationsService.success(':: Has Been Updated Successfully ::');\n      }\n    }\n  }\n\n  recieveTodo(todo) {\n    this.item = {\n      addTodo: todo.addTodo,\n      isCompleted: todo.isCompleted\n    };\n    return this.setClasses(this.item);\n  }\n\n  onEdit(todo) {\n    this.contactsService.populateForm(todo);\n    this.contactsService.updateTodo(this.contactsService.todoForm.value);\n  }\n\n  onDelete($key) {\n    this.dialogService.openConfirmDialog('Are You Sure You Want To Delete This Record ?').afterClosed().subscribe(response => {\n      console.log(response);\n      if (response) {\n        this.contactsService.deleteTodo($key);\n        this.notificationsService.warn(' !! It Has Been Deleted Successfully !!! ');\n      }\n    });\n  }\n\n  // Set Dynamic Classes\n  setClasses(item) {\n    const classes = {\n      'is-completed': item.isCompleted\n    };\n\n    return classes;\n\n  }\n\n  openUndoSnackBar() {\n    const snackbarRef = this.snackbar.open('Customer Has Been Saved', 'UNDO', {\n      horizontalPosition: 'end'\n    });\n\n    snackbarRef.onAction().subscribe(() => {\n      alert('Undo That Save Now');\n    });\n  }\n\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvcmVwLWRpYWxvZy9yZXAtZGlhbG9nLmNvbXBvbmVudC5jc3MifQ== */\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-rep-dialog',\n  templateUrl: './rep-dialog.component.html',\n  styleUrls: ['./rep-dialog.component.css']\n})\nexport class RepDialogComponent implements OnInit {\n\n  rep: string;\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import { ContactsComponent } from './../../components/contacts/contacts.component';\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: ContactsComponent,\n    data: { title: 'Benion Contacts'}\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class ContactsRoutingModule { }\n","import { ContactsComponent } from './../../components/contacts/contacts.component';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport { ContactsRoutingModule } from './contacts-routing.module';\nimport {\n  MatTabsModule,\n  MatInputModule,\n  MatStepperModule,\n  MatButtonModule,\n  MatFormFieldModule,\n  MatAutocompleteModule,\n  MatIconModule,\n  MatCardModule,\n  MatNativeDateModule,\n  MatDatepickerModule,\n  MatDialogModule,\n  MatRadioModule,\n  MatSnackBarModule,\n  MatTooltipModule,\n  MatTableModule,\n  MatSortModule,\n  MatCheckboxModule,\n  MatPaginatorModule,\n  MatListModule,\n  MatGridListModule\n} from '@angular/material';\nimport { RepDialogComponent } from 'src/app/components/rep-dialog/rep-dialog.component';\n\n\n\n@NgModule({\n  declarations: [\n    ContactsComponent,\n    RepDialogComponent\n  ],\n  imports: [\n    CommonModule,\n    ContactsRoutingModule,\n    FormsModule,\n    ReactiveFormsModule,\n    MatTabsModule,\n    MatStepperModule,\n    MatButtonModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatAutocompleteModule,\n    MatIconModule,\n    MatCardModule,\n    MatDatepickerModule,\n    MatNativeDateModule,\n    MatDialogModule,\n    MatRadioModule,\n    MatSnackBarModule,\n    MatTooltipModule,\n    MatTableModule,\n    MatSortModule,\n    MatCheckboxModule,\n    MatPaginatorModule,\n    MatListModule,\n    MatGridListModule\n  ],\n  entryComponents: [RepDialogComponent]\n})\nexport class ContactsModule { }\n"],"sourceRoot":"webpack:///"}